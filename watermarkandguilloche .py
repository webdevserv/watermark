# -*- coding: utf-8 -*-
"""watermarkandgilloche.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IkzUH-XrF8t_xfElLX3Bz_5nNFbCy1NE
"""

#Developed by github WebDevServ + AI Prompting**

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir('/content/')
!rm -r '/content/MyImages'
!mkdir '/content/MyImages'

import os
os.chdir('/content/')
!rm -r '/content/MyResults'
!mkdir '/content/MyResults'

#set of images stamped with watermark and Guilloché pattern
import os
from PIL import Image

def apply_opacity(image_path, opacity):
    """Adjusts opacity of an image and returns a new image."""
    img = Image.open(image_path).convert("RGBA")
    alpha = img.split()[3].point(lambda p: int(p * (opacity / 100)))
    img.putalpha(alpha)
    return img

# Define folder paths
input_folder = "/content/MyImages"
output_folder = "/content/MyResults"

# Get list of images in MyImages folder
image_files = sorted([f for f in os.listdir(input_folder) if f.endswith((".png", ".jpg", ".jpeg"))])

# Process each image
for idx, image_file in enumerate(image_files, start=1):
    main_image = Image.open(os.path.join(input_folder, image_file)).convert("RGBA").resize((1024, 1024))

    watermark = apply_opacity("/content/watermark.png", 30)  # 30% opacity
    pattern = apply_opacity("/content/pattern.png", 17)  # 30% opacity

    # Resize pattern to 250px width while maintaining aspect ratio
    pattern_width = 250
    pattern_height = int(pattern.height * (pattern_width / pattern.width))  # Preserve aspect ratio
    pattern = pattern.resize((pattern_width, pattern_height))

    # Resize watermark to 400px width while maintaining aspect ratio
    watermark_width = 400
    watermark_height = int(watermark.height * (watermark_width / watermark.width))
    watermark = watermark.resize((watermark_width, watermark_height))

    # Create a copy of the main image to overlay elements
    final_image = main_image.copy()

    # Overlay pattern (top left, behind watermark)
    final_image.paste(pattern, (10, 10), pattern)

    # Overlay watermark (bottom right)
    final_image.paste(watermark, (1024 - watermark_width - 10, 1024 - watermark_height - 10), watermark)

    # Save final image with the naming pattern (1w.png, 2w.png, etc.)
    output_filename = f"{idx}w.png"
    final_image.save(os.path.join(output_folder, output_filename))

print("✅ Batch processing complete! All images saved in MyResults.")

#one image any size
import os
from PIL import Image

def apply_opacity(image_path, opacity):
    """Adjusts opacity of an image and returns a new image."""
    img = Image.open(image_path).convert("RGBA")
    alpha = img.split()[3].point(lambda p: int(p * (opacity / 100)))
    img.putalpha(alpha)
    return img

def resize_image(image, max_size=(1024, 1024)):
    """Resizes an image while preserving aspect ratio."""
    image.thumbnail(max_size, Image.Resampling.LANCZOS)
    return image

# Define folder paths
input_folder = "/content/MyImages"
output_folder = "/content/MyResults"

# Ensure output folder exists
os.makedirs(output_folder, exist_ok=True)

# Get list of images in MyImages folder
image_files = sorted([f for f in os.listdir(input_folder) if f.lower().endswith((".png", ".jpg", ".jpeg"))])

# Process each image
if not image_files:
    print(f"⚠️ No image files found in '{input_folder}'.")
else:
    for idx, image_file in enumerate(image_files, start=1):
        image_path = os.path.join(input_folder, image_file)
        main_image = Image.open(image_path).convert("RGBA")
        main_image = resize_image(main_image)  # Resize while keeping aspect ratio

        img_width, img_height = main_image.size  # Get resized dimensions

        # Adjust watermark size dynamically based on image size
        watermark = apply_opacity("/content/watermark.png", 30)  # 30% opacity
        watermark_width = int(img_width * 0.4)  # 40% of image width
        watermark_height = int(watermark.height * (watermark_width / watermark.width))  # Maintain aspect ratio
        watermark = watermark.resize((watermark_width, watermark_height))

        # Adjust pattern size dynamically based on image size
        pattern = apply_opacity("/content/pattern.png", 17)  # 17% opacity
        pattern_width = int(img_width * 0.25)  # 25% of image width
        pattern_height = int(pattern.height * (pattern_width / pattern.width))  # Maintain aspect ratio
        pattern = pattern.resize((pattern_width, pattern_height))

        # Overlay pattern (top left, behind watermark)
        final_image = main_image.copy()
        final_image.paste(pattern, (10, 10), pattern)

        # Overlay watermark (bottom right)
        final_image.paste(watermark, (img_width - watermark_width - 10, img_height - watermark_height - 10), watermark)

        # Save final image with the naming pattern (1w.png, 2w.png, etc.)
        output_filename = f"{idx}w.png"
        final_image.save(os.path.join(output_folder, output_filename))

    print(f"✅ Batch processing complete! {len(image_files)} images saved in '{output_folder}'.")



# Zip the files
!zip -r /content/MyResults/images.zip /content/MyResults/*.*

# Download the zip file
from google.colab import files
files.download('/content/MyResults/images.zip')